//! Module for site details requests and responses exchanged with the SolarEdge server monitoring API.

use crate::site_location::SiteLocation;
use crate::site_module::SiteModule;
use crate::site_public_settings::SitePublicSettings;
use crate::{Response, SolaredgeCredentials};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// site_details request
pub struct SiteDetailsReq {}

#[derive(Serialize, Deserialize, Debug)]
#[allow(non_snake_case)]
/// site_details response
pub struct SiteDetailsResp {
    /// Detailed information about the monitoring site
    pub details: SiteDetails,
}

#[derive(Serialize, Deserialize, Debug)]
#[allow(non_snake_case)]
/// Detailed information for a single site.
pub struct SiteDetails {
    /// ID of the site. Should match the site_id specified in the Solaredge request.
    pub id: i32,

    /// Name of the site.
    pub name: String,

    /// Account the site belongs to.
    pub accountId: i32,

    /// Site status, either Active or Pending Communication.
    pub status: String,

    /// Maximum power that can be generated by the site.
    pub peakPower: f32,

    /// Last time the site reported in to SolarEdge.
    pub lastUpdateTime: String,

    /// Currency type (money) used at the site location
    pub currency: String,

    /// Date site was initially brought on line.
    pub installationDate: String,

    /// Date site was given permission to operate.
    pub ptoDate: Option<String>,

    /// Free form notes about the site.
    pub notes: String,

    /// Site type, ("Optimizers & Inverters", "Safety & Monitoring Interface", "Monitoring Combiner Boxes")
    pub r#type: String, // had to escape the keyword type to use as an identifier

    /// Site location (mailing address)
    pub location: SiteLocation,

    /// Main module type used at the site (e.g solar panel model)
    pub primaryModule: SiteModule,

    /// Number of open alerts at the site.
    pub alertQuantity: Option<i32>,

    /// Highest alert severity at the site.
    pub alertSeverity: Option<String>,

    /// Miscellaneous uris associated with the web page for the site.
    pub uris: HashMap<String, String>,

    /// Public settings of the web page for the site.
    pub publicSettings: SitePublicSettings,
}

impl SiteDetailsReq {
    /// Create a site details request message that can be sent to SolarEdge.
    pub fn new() -> Self {
        SiteDetailsReq {}
    }

    // Send the site_details request to Solaredge and return the response.
    //
    // # Arguments
    //
    // * `solaredge` - SolarEdge credentials to use for sending
    //
    // # Returns
    // the SolarEdge response or an error string
    pub(crate) fn send(&self, solaredge: &SolaredgeCredentials) -> Result<Response, String> {
        let url = format!(
            "{}site/{}/details?{}",
            solaredge.url_start, solaredge.site_id, solaredge.url_end
        );

        let res = match reqwest::blocking::get(&url) {
            Ok(r) => r,
            Err(e) => return Err(format!("reqwest get error {}", e)),
        };

        let parsed = match res.json::<SiteDetailsResp>() {
            Ok(p) => p,
            Err(e) => return Err(format!("JSON parse error: {}", e)),
        };

        Ok(Response::SiteDetails(Box::new(parsed)))
    }
}

impl Default for SiteDetailsReq {
    fn default() -> Self {
        Self::new()
    }
}
