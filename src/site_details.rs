//! Module for site details requests and responses exchanged with the SolarEdge server monitoring API.

use crate::{SendReq, SiteLocation, SiteModule, SitePublicSettings, MONITORING_API_URL};
use serde::Deserialize;
use std::collections::HashMap;

/// site_details request
#[derive(Clone, Debug, PartialEq)]
pub struct Req;

/// site_details response
#[derive(Clone, Deserialize, Debug, Default, PartialEq)]
pub struct Resp {
    /// Detailed information about the monitoring site
    pub details: SiteDetails,
}

/// Detailed information for a single site.
#[derive(Clone, Deserialize, Debug, Default, PartialEq)]
#[serde(rename_all = "camelCase")]
pub struct SiteDetails {
    /// ID of the site. Should match the site_id specified in the Solaredge request.
    pub id: u32,

    /// Name of the site.
    pub name: String,

    /// Account the site belongs to.
    pub account_id: u32,

    /// Site status, either Active or Pending Communication.
    pub status: String,

    /// Maximum power that can be generated by the site.
    pub peak_power: f32,

    /// Last time the site reported in to SolarEdge.
    pub last_update_time: String,

    /// Currency type (money) used at the site location
    pub currency: String,

    /// Date site was initially brought on line.
    pub installation_date: String,

    /// Date site was given permission to operate.
    pub pto_date: Option<String>,

    /// Free form notes about the site.
    pub notes: String,

    /// Site type, ("Optimizers & Inverters", "Safety & Monitoring Interface", "Monitoring Combiner Boxes")
    #[serde(rename = "type")]
    pub site_type: String,

    /// Site location (mailing address)
    pub location: SiteLocation,

    /// Main module type used at the site (e.g solar panel model)
    pub primary_module: SiteModule,

    /// Number of open alerts at the site.
    pub alert_quantity: Option<u32>,

    /// Highest alert severity at the site.
    pub alert_severity: Option<String>,

    /// Miscellaneous uris associated with the web page for the site.
    pub uris: HashMap<String, String>,

    /// Public settings of the web page for the site.
    pub public_settings: SitePublicSettings,
}

impl Req {
    /// Create a site details request message that can be sent to SolarEdge.
    #[must_use]
    pub fn new() -> Self {
        Req {}
    }
}

impl SendReq<Resp> for Req {
    fn build_url(&self, site_id: &str, api_key: &str) -> String {
        format!(
            "{}site/{}/details?{}",
            *MONITORING_API_URL, site_id, api_key,
        )
    }
}

impl Default for Req {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::is_normal;

    #[test]
    fn normal_types_unit_test() {
        is_normal::<Req>();
        is_normal::<Resp>();
        is_normal::<SiteDetails>();
    }
}
