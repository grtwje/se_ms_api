//! Module for site details requests and responses exchanged with the SolarEdge server monitoring API.

use crate::error::Error;
use crate::site_location::SiteLocation;
use crate::site_module::SiteModule;
use crate::site_public_settings::SitePublicSettings;
use crate::{SolaredgeCredentials, REQWEST_CLIENT};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// site_details request
#[derive(Clone, Debug, PartialEq)]
pub struct SiteDetailsReq;

/// site_details response
#[derive(Clone, Serialize, Deserialize, Debug, Default, PartialEq)]
pub struct SiteDetailsResp {
    /// Detailed information about the monitoring site
    pub details: SiteDetails,
}

/// Detailed information for a single site.
#[derive(Clone, Serialize, Deserialize, Debug, Default, PartialEq)]
#[serde(rename_all = "camelCase")]
pub struct SiteDetails {
    /// ID of the site. Should match the site_id specified in the Solaredge request.
    pub id: i32,

    /// Name of the site.
    pub name: String,

    /// Account the site belongs to.
    pub account_id: i32,

    /// Site status, either Active or Pending Communication.
    pub status: String,

    /// Maximum power that can be generated by the site.
    pub peak_power: f32,

    /// Last time the site reported in to SolarEdge.
    pub last_update_time: String,

    /// Currency type (money) used at the site location
    pub currency: String,

    /// Date site was initially brought on line.
    pub installation_date: String,

    /// Date site was given permission to operate.
    pub pto_date: Option<String>,

    /// Free form notes about the site.
    pub notes: String,

    /// Site type, ("Optimizers & Inverters", "Safety & Monitoring Interface", "Monitoring Combiner Boxes")
    #[serde(rename = "type")]
    pub site_type: String,

    /// Site location (mailing address)
    pub location: SiteLocation,

    /// Main module type used at the site (e.g solar panel model)
    pub primary_module: SiteModule,

    /// Number of open alerts at the site.
    pub alert_quantity: Option<i32>,

    /// Highest alert severity at the site.
    pub alert_severity: Option<String>,

    /// Miscellaneous uris associated with the web page for the site.
    pub uris: HashMap<String, String>,

    /// Public settings of the web page for the site.
    pub public_settings: SitePublicSettings,
}

impl SiteDetailsReq {
    /// Create a site details request message that can be sent to SolarEdge.
    pub fn new() -> Self {
        SiteDetailsReq {}
    }

    /// Send the site_details request to Solaredge and return the response.
    ///
    /// # Arguments
    ///
    /// * `solaredge` - SolarEdge credentials to use for sending
    ///
    /// # Returns
    /// The SolarEdge response or an error string.
    /// Errors can occur on the request send or when parsing the response.
    pub fn send(&self, solaredge: &SolaredgeCredentials) -> Result<SiteDetailsResp, Error> {
        let url = format!(
            "{}site/{}/details?{}",
            solaredge.url_start, solaredge.site_id, solaredge.url_end
        );

        let res = REQWEST_CLIENT.get(&url).send()?;

        let parsed = res.json::<SiteDetailsResp>()?;

        Ok(parsed)
    }
}

impl Default for SiteDetailsReq {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::is_normal;

    #[test]
    fn normal_types_unit_test() {
        is_normal::<SiteDetailsReq>();
        is_normal::<SiteDetailsResp>();
        is_normal::<SiteDetails>();
    }
}
